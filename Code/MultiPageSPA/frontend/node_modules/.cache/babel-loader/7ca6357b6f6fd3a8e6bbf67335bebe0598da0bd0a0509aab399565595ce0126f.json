{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bengi\\\\Documents\\\\GitHub\\\\React-Udemy-Course\\\\Code\\\\MultiPageSPA\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\n// import { useLoaderData, json, defer, Await } from \"react-router-dom\";\n\n// import EventsList from \"../components/EventsList\";\n// import { Suspense } from \"react\";\n\n// function EventsPage() {\n//   const { events } = useLoaderData();\n\n//   // // if (data.isError) {\n//   // //  return <p>{data.message}</p>;\n//   // // }\n//   // const events = data.events;\n\n//   // return <EventsList events={events} />;\n//   return (\n//     <Suspense fallback={<p style={{ textAlign: 'center'}}>Loading....</p>} >\n//       <Await resolve={events}>\n//         {(loadedEvents) => <EventsList events={loadedEvents} />}\n//       </Await>\n//     </Suspense>\n//   );\n// }\n\n// export default EventsPage;\n\n// async function loadEvents() {\n//   const response = await fetch(\"http://localhost:8080/events\");\n\n//   if (!response.ok) {\n//     // return { isError: true, message: \"Could not fetch events.\" };\n//     // throw new Response(JSON.stringify({ message: 'Could not fetch events.'}), {\n//     //   status: 500,\n//     // })\n//     throw json(\n//       { message: \"Could not fetch events.\" },\n//       {\n//         status: 500,\n//       }\n//     );\n//   } else {\n//     return response;\n//   }\n// }\n\n// export function loader() {\n//   defer({\n//     events: loadEvents(),\n//   });\n// }\n\nimport { Suspense } from 'react';\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/bengi/Documents/GitHub/React-Udemy-Course/Code/MultiPageSPA/frontend/src/pages/Events.js"],"sourcesContent":["// import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\n\r\n// import EventsList from \"../components/EventsList\";\r\n// import { Suspense } from \"react\";\r\n\r\n// function EventsPage() {\r\n//   const { events } = useLoaderData();\r\n\r\n//   // // if (data.isError) {\r\n//   // //  return <p>{data.message}</p>;\r\n//   // // }\r\n//   // const events = data.events;\r\n\r\n//   // return <EventsList events={events} />;\r\n//   return (\r\n//     <Suspense fallback={<p style={{ textAlign: 'center'}}>Loading....</p>} >\r\n//       <Await resolve={events}>\r\n//         {(loadedEvents) => <EventsList events={loadedEvents} />}\r\n//       </Await>\r\n//     </Suspense>\r\n//   );\r\n// }\r\n\r\n// export default EventsPage;\r\n\r\n// async function loadEvents() {\r\n//   const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n//   if (!response.ok) {\r\n//     // return { isError: true, message: \"Could not fetch events.\" };\r\n//     // throw new Response(JSON.stringify({ message: 'Could not fetch events.'}), {\r\n//     //   status: 500,\r\n//     // })\r\n//     throw json(\r\n//       { message: \"Could not fetch events.\" },\r\n//       {\r\n//         status: 500,\r\n//       }\r\n//     );\r\n//   } else {\r\n//     return response;\r\n//   }\r\n// }\r\n\r\n// export function loader() {\r\n//   defer({\r\n//     events: loadEvents(),\r\n//   });\r\n// }\r\n\r\nimport { Suspense } from 'react';\r\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\r\n\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const { events } = useLoaderData();\r\n\r\n  return (\r\n    <Suspense fallback={<p style={{ textAlign: 'center' }}>Loading...</p>}>\r\n      <Await resolve={events}>\r\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\r\n      </Await>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: 'Could not fetch events.' };\r\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json(\r\n      { message: 'Could not fetch events.' },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  return defer({\r\n    events: loadEvents(),\r\n  });\r\n}\r\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGT,aAAa,EAAE;EAElC,oBACEM,OAAA,CAACP,QAAQ;IAACW,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;IAAAJ,QAAA,eACpEP,OAAA,CAACH,KAAK;MAACe,OAAO,EAAET,MAAO;MAAAI,QAAA,EACnBM,YAAY,iBAAKb,OAAA,CAACF,UAAU;QAACK,MAAM,EAAEU;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACjD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACC;AAEf;AAACT,EAAA,CAVQD,UAAU;EAAA,QACEP,aAAa;AAAA;AAAAoB,EAAA,GADzBb,UAAU;AAYnB,eAAeA,UAAU;AAEzB,eAAec,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMvB,IAAI,CACR;MAAEwB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CAAC,CACF;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACrB,IAAI,EAAE;IACrC,OAAO0B,OAAO,CAAClB,MAAM;EACvB;AACF;AAEA,OAAO,SAASmB,MAAMA,CAAA,EAAG;EACvB,OAAO1B,KAAK,CAAC;IACXO,MAAM,EAAEY,UAAU;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}